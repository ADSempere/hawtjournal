---
title: HawtDB
in_menu: true
sort_info: 1
api_base: http://hawtdb.fusesource.org/maven/1.0/apidocs/org/fusesource/hawtdb
--- name:overview pipeline:haml,tags

%h1 {project_name:}

{project_slogan:}

--- name:content pipeline:tags,markdown

# {project_name:}

{project_name:} is a high-performance key/value embedded database for Java
applications.

* Table of contents
{:toc}

### Features

* Optional ACID transactions
* Multiversion Concurrency Control (MVCC)
* Object Caching and Object Marshaling Deferring
* BTree and Hash Indexes

## Overview

HawtDB implements index operations over a page file. An index provides Map like
access to persistent data. The page file provides block oriented access to a
data file. There are transactional and non-transactional implementations of the
page file. The transactional version provides
[MVCC](http://en.wikipedia.org/wiki/Multiversion_concurrency_control).

### Transaction Page Files

A transactional page file is created with the
[`TxPageFileFactory`]({api_base:}/api/TxPageFileFactory.html) class. You first
configure it and then `open()` it.

Example:
{pygmentize:: java}
// Opening a transactional page file.
TxPageFileFactory factory = new TxPageFileFactory()
factory.setFile(new File("mydb.dat"));
factory.open();
TxPageFile pageFile = factory.getTxPageFile();
{pygmentize}

Use a transactional page file when you need your indexes to have 
[ACID](http://en.wikipedia.org/wiki/ACID) levels of service.

### Non Transaction Page Files

Sometimes you don't need an index to provide
[ACID](http://en.wikipedia.org/wiki/ACID) levels of service. Perhaps your just
using the index to page out of memory temporary values that can be discarded
on restart. Then you just need to create a plain
[`PageFile`]({api_base:}/api/PageFile.html) instead of a
[`TxPageFile`]({api_base:}/api/TxPageFile.html)

Similar to transaction page files, a non-transactional page file is created with
the [`PageFileFactory`]({api_base:}/api/PageFileFactory.html) class. You first
configure it and then `open()` it.

Example:
{pygmentize:: java}
// Opening a transactional page file.
PageFileFactory factory = new PageFileFactory()
factory.setFile(new File("mydb.dat"));
factory.open();
PageFile pageFile = factory.getPageFile();
{pygmentize}

Since the page file is not transactional, you must serialize access to
the index and page file yourself. Concurrent index updates will just
step on each other and cause unexpected errors and index
inconsistencies. Furthermore, Non-Transactional page files do keep a
persistent free page list. When it is reopened it will think all the
pages can be used for new page updates.

## Using Indexes with Page Files

There are two kinds of indexes.  BTree and Hash based indexes.

* BTree: Maintain keys in sorted order and support sorted iteration
* Hash: Keys are not sorted.  Can perform better than hash indexes.

Both the BTree and Hash indexes use factory object to create instances
of the index. The factory holds configuration information for the index.
The factories support either creating a new index or opening a
previously created index.

When an index is opened or created, you must pass it either
[`PageFile`]({api_base:}/api/PageFile.html) or a
[`Transaction`]({api_base:}/api/Transaction.html).

Hash Index Non-Transactional Example:
{pygmentize:: java}
HashIndexFactory<String, String> indexFactory = 
    new HashIndexFactory<String, String>();

Index<String, String> root = indexFactory.create(pageFile);
{pygmentize}

BTree Index Transactional Example:
{pygmentize:: java}
BTreeIndexFactory<String, String> indexFactory = 
    new BTreeIndexFactory<String, String>();

Transaction tx = pageFile.tx();
Index<String, String> root = indexFactory.create(tx);
tx.commit();
{pygmentize}


You should only create the indexes the first time you create/open 
the page file.  An easy way to tell it's the first time the page
file is to test to see the page file has allocated page 0.

For Example:
{pygmentize:: java}
BTreeIndexFactory<String, String> indexFactory = 
    new BTreeIndexFactory<String, String>();

if( !pageFile.allocator().isAllocated(0) ) {
    Transaction tx = pageFile.tx();
    Index<String, String> root = indexFactory.create(tx);
    tx.commit();
}
{pygmentize}

Since indexes are created at the first free page in the page file, the
index will get allocated at page 0.  Subsequently, when you reopen the
page file, you will not end up allocating a new index root page.

### Accessing Index Data

Storing data in an index:
{pygmentize:: java}
Transaction tx = pageFile.tx();
Index<String, String> root = indexFactory.open(tx);
root.put("Key:1", "Hello World");
tx.commit();
{pygmentize}


Retreiving data from an index:
{pygmentize:: java}
Transaction tx = pageFile.tx();
Index<String, String> root = indexFactory.open(tx);
String result = root.get("Key:1");
tx.commit();
{pygmentize}


## Optimistic Transactions

{project_name:} does not provide any form of pessimistic locking. All
transactions execute concurrently potentially at different versioned views of
the page file. Once a transaction starts, it will not see the updates performed
to the page file by subsequent transactions that commit.

If any of the pages updated in a transaction are updated by another concurrent
update, then a
[OptimisticUpdateException]({api_base:}/api/OptimisticUpdateException.html) is
thrown and and the update is rolled back. Therefore, end user operations which
update indexes should catch this runtime exception and either retry the
operation or report the failure to the user.

## Customized Key/Value Encoding

By default the indexes will use standard java object serialization to
serialize keys and values. If you want to provide a customized encoding
strategy or if your key or value does not support object serialization, then
you can configure key and value codecs on the index factory objects.

For example, it is about 30 times more efficient to use the
[`StringCodec`](http://github.com/chirino/hawtbuf/blob/hawtbuf-project-1.0/hawtbuf-core/src/main/java/org/fusesource/hawtbuf/codec/StringCodec.java)
StringCodec when using String values than to standard object serialization:

{pygmentize:: java}
indexFactory.setKeyCodec(StringCodec.INSTANCE);
indexFactory.setValueCodec(StringCodec.INSTANCE);
{pygmentize}


You can create custom Codec implementations by implementing the
[`Codec`](http://github.com/chirino/hawtbuf/blob/hawtbuf-project-1.0/hawtbuf-core/src/main/java/org/fusesource/hawtbuf/codec/Codec.java)
class.

## Custom Comparators

If your keys do not implement the Comparable interface, or if you want to
sort the key different from their natural sort order, then you can configure
a Comparator instance on the index factory.  For example, to do a case 
insensitive sorting of the string keys you would:

{pygmentize:: java}
indexFactory.setComparator(new Comparator<String>(){
    public int compare(String o1, String o2) {
        return o1.compareToIgnoreCase(o2);
    }
};);
{pygmentize}

## Iterating Sorted Indexes

Sorted indexes can be sequentially iterated using the enhanced for loop since
they implement the Iterable interface.  For example:

{pygmentize:: java}
for(Map.Entry<Key, Value> entry: index) {
  System.out.println(entry.getKey()+" = "+entry.getValue());
}
{pygmentize}

Typically that's not used since folks are usually only interested in a subset
of the keys. It is more efficient if a predicate based iterator is used.
Predicates help cut down the number of BTree nodes that need to be accessed.
Example:

{pygmentize:: java}
import org.fusesource.hawtdb.api.Predicates.*;
...
Predicate<Long> p = and(gt(new Long(12)), lt(new Long(450))
Iterator<Map.Entry<Key, Value>> i = index.iterator(p);
while( i.hasNext() ) {
  Map.Entry<Key, Value> entry = i.next();
  System.out.println(entry.getKey()+" = "+entry.getValue());
}
{pygmentize}

The example above is using the static methods in the Predicates class to 
help build a complex predicate expression.  You are free to implement
the Predicate interface to create more complex predicates.


## Object Caching and Object Encoding Deferring

If your keys and values are immutable values, then you should enable the
deferred encoding option on the index. This option allows the index to avoid
encoding the keys and values when the index operations occur and instead
places them on to an internally maintained object cache. Keys/Values are not
encoded until the last possible moment, which is when the index pages are
flushed to disk in a batch. This allows you to avoid some encoding
processing if the same key gets updated multiple times. It also avoid some
object decoding as a subsequent get operation can return a cached value
instead of having to do a page decode.

Example:
{pygmentize:: java}
indexFactory.setDeferredEncoding(true);
{pygmentize}

## Storing Multiple Indexes in one Page File

HawtDB supports storing multiple indexes in a single page file.  This
becomes desirable if you:

* want to atomically update multiple indexes in single transaction 
* have a large number of indexes and want to avoid using a file for each 
  index

Just create the indexes as usual, but you will also need to keep track
of where in the page file the were allocated at.  For example:


BTree Index Transactional Example:
{pygmentize:: java}
Index<String, String> index1 = indexFactory.create(tx);
Index<String, String> index2 = indexFactory.create(tx);
int location1 = index1.getIndexLocation();
int location2 = index2.getIndexLocation();
{pygmentize}

You could store those locations in a root index or an external location.
To open those indexes again, you would do something similar to:

{pygmentize:: java}
int location1 = ...
int location2 = ...
Index<String, String> index1 = indexFactory.open(tx, location1);
Index<String, String> index1 = indexFactory.open(tx, location2);
{pygmentize}
## References
* [Full API]({api_base:}/api/package-summary.html)
